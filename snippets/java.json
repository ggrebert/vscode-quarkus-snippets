{
    "Quarkus - create resource": {
        "prefix": [
            "q-resource",
        ],
        "description": "Create new Quarkus REST resource class",
        "body": [
            "package ${1:packagename};",
            "",
            "import java.util.List;",
            "import java.util.UUID;",
            "",
            "import javax.transaction.Transactional;",
            "import javax.validation.Valid;",
            "import javax.ws.rs.Consumes;",
            "import javax.ws.rs.DELETE;",
            "import javax.ws.rs.GET;",
            "import javax.ws.rs.POST;",
            "import javax.ws.rs.PUT;",
            "import javax.ws.rs.Path;",
            "import javax.ws.rs.Produces;",
            "import javax.ws.rs.WebApplicationException;",
            "import javax.ws.rs.core.MediaType;",
            "import javax.ws.rs.core.Response;",
            "import javax.ws.rs.core.Response.Status;",
            "",
            "import org.eclipse.microprofile.openapi.annotations.Operation;",
            "import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;",
            "import org.eclipse.microprofile.openapi.annotations.media.Schema;",
            "import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;",
            "import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;",
            "import org.eclipse.microprofile.openapi.annotations.tags.Tag;",
            "import org.jboss.resteasy.annotations.jaxrs.PathParam;",
            "",
            "@Path(\"${3:/api/${2}s/v1/}\")",
            "@Produces(MediaType.APPLICATION_JSON)",
            "@Consumes(MediaType.APPLICATION_JSON)",
            "@Tag(name = \"${2:resource}s\", description = \"Operations on ${2}s resource.\")",
            "public class ${TM_FILENAME_BASE} {",
            "",
            "\tprivate static final String UUID_PATTERN =",
            "\t\t\t\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\";",
            "",
            "\t@GET",
            "\t@Operation(summary = \"Get all ${2}s\")",
            "\tpublic List<${4:Entity}> get() {",
            "\t\t$0return $4.listAll();",
            "\t}",
            "",
            "\t@GET",
            "\t@Path(\"{uuid}\")",
            "\t@APIResponse(responseCode = \"200\")",
            "\t@APIResponse(responseCode = \"404\", description = \"${2/(.*)/${1:/capitalize}/} not found\")",
            "\t@Operation(summary = \"Find $2 by ID\")",
            "\tpublic $4 getSindle(@Parameter(schema = @Schema(format = \"uuid\", type = SchemaType.STRING,",
            "\t\t\tpattern = UUID_PATTERN)) @PathParam(\"uuid\") UUID uuid) {",
            "\t\t$4 entity = $4.findByUUID(uuid);",
            "",
            "\t\tif (entity == null) {",
            "\t\t\tthrow new WebApplicationException(\"${2/(.*)/${1:/capitalize}/} not found\", Status.NOT_FOUND);",
            "\t\t}",
            "",
            "\t\treturn entity;",
            "\t}",
            "",
            "\t@POST",
            "\t@Transactional",
            "\t@APIResponse(responseCode = \"201\", description = \"${2/(.*)/${1:/capitalize}/} created\")",
            "\t@APIResponse(responseCode = \"406\", description = \"Invalid data\")",
            "\t@Operation(summary = \"Create new $2\")",
            "\tpublic Response create(@Valid $4 entity) {",
            "\t\tif (entity.uuid != null) {",
            "\t\t\tthrow new WebApplicationException(\"Id was invalidly set on request\",",
            "\t\t\t\t\tStatus.NOT_ACCEPTABLE);",
            "\t\t}",
            "",
            "\t\tentity.persist();",
            "",
            "\t\treturn Response.ok(entity).status(Status.CREATED).build();",
            "\t}",
            "",
            "\t@PUT",
            "\t@Path(\"{uuid}\")",
            "\t@Transactional",
            "\t@APIResponse(responseCode = \"200\")",
            "\t@APIResponse(responseCode = \"404\", description = \"${2/(.*)/${1:/capitalize}/} not found\")",
            "\t@Operation(summary = \"Edit $2 by ID\")",
            "\tpublic $4 update(@Parameter(schema = @Schema(format = \"uuid\", type = SchemaType.STRING,",
            "\t\t\tpattern = UUID_PATTERN)) @PathParam(\"uuid\") UUID uuid, @Valid $4 newEntity) {",
            "\t\t$4 entity = $4.findByUUID(uuid);",
            "",
            "\t\tif (entity == null) {",
            "\t\t\tthrow new WebApplicationException(\"${2/(.*)/${1:/capitalize}/} not found\", Status.NOT_FOUND);",
            "\t\t}",
            "",
            "\t\treturn entity;",
            "\t}",
            "",
            "\t@DELETE",
            "\t@Path(\"{uuid}\")",
            "\t@APIResponse(responseCode = \"204\", description = \"${2/(.*)/${1:/capitalize}/} deleted\")",
            "\t@APIResponse(responseCode = \"404\", description = \"${2/(.*)/${1:/capitalize}/} not found\")",
            "\t@Operation(summary = \"Delete $2 by ID\")",
            "\tpublic Response delete(@Parameter(schema = @Schema(format = \"uuid\", type = SchemaType.STRING,",
            "\t\t\tpattern = UUID_PATTERN)) @PathParam(\"uuid\") UUID uuid) {",
            "\t\t$4 entity = $4.findByUUID(uuid);",
            "",
            "\t\tif (entity == null) {",
            "\t\t\tthrow new WebApplicationException(\"${2/(.*)/${1:/capitalize}/} not found\", Status.NOT_FOUND);",
            "\t\t}",
            "",
            "\t\tentity.delete();",
            "",
            "\t\treturn Response.status(Status.NO_CONTENT).build();",
            "\t}",
            "}",
            "",
        ]
    },
    "Quarkus - Panache entity": {
        "prefix": [
            "panache-entity",
            "q-panache-entity",
        ],
        "description": "Create a Panache entity",
        "body": [
            "package ${1:packagename};",
            "",
            "import java.util.Date;",
            "import java.util.UUID;",
            "",
            "import javax.persistence.Column;",
            "import javax.persistence.Entity;",
            "import javax.persistence.GeneratedValue;",
            "import javax.persistence.GenerationType;",
            "import javax.persistence.Id;",
            "import javax.persistence.Temporal;",
            "import javax.persistence.TemporalType;",
            "import javax.validation.constraints.Size;",
            "",
            "import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;",
            "import org.eclipse.microprofile.openapi.annotations.media.Schema;",
            "import org.hibernate.annotations.CreationTimestamp;",
            "",
            "import io.quarkus.hibernate.orm.panache.PanacheEntityBase;",
            "",
            "@Entity",
            "public class ${TM_FILENAME_BASE} extends PanacheEntityBase {",
            "",
            "\t@Id",
            "\t@GeneratedValue(strategy = GenerationType.AUTO)",
            "\t@Schema(format = \"uuid\", type = SchemaType.STRING,",
            "\t\t\tpattern = \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\",",
            "\t\t\treadOnly = true, example = \"4b502574-fa06-408d-98c9-5fc88bdc863b\")",
            "\tpublic UUID uuid;",
            "",
            "\t@Size(max = 254, min = 5)",
            "\t@Column(length = 255, nullable = false)",
            "\tpublic String title;",
            "",
            "\t@Schema(readOnly = true)",
            "\t@Column(nullable = false)",
            "\t@CreationTimestamp",
            "\t@Temporal(TemporalType.TIMESTAMP)",
            "\tpublic Date createdAt;",
            "",
            "\t$0",
            "",
            "\tpublic static ${TM_FILENAME_BASE} findByUUID(UUID uuid) {",
            "\t\treturn find(\"uuid\", uuid).firstResult();",
            "\t}",
            "}",
            "",
        ]
    },
    "Quarkus - UUID path parameter": {
        "prefix": [
            "uuid-path-parameter",
            "q-uuid-path-parameter",
        ],
        "description": "Insert a UUID path parameter",
        "body": [
            "@Parameter(schema = @Schema(format = \"uuid\", type = SchemaType.STRING,",
            "pattern = UUID_PATTERN)) @PathParam(\"uuid\") UUID ${1:uuid}$0",
        ]
    },
    "Quarkus - path": {
        "prefix": [
            "q-path",
        ],
        "description": "Create new path entrypoint",
        "body": [
            "@${1|GET,POST,PUT,DELETE|}",
            "@Path($2)",
            "@APIResponse(responseCode = \"200\")",
            "@APIResponse(responseCode = \"404\", description = \"${3:Resource} not found\")",
            "@APIResponse(responseCode = \"406\", description = \"Invalid data\")",
            "@Operation(summary = \"${4}\")",
            "public ${5:Response} ${6:method}($7) {",
            "\t$0",
            "}",
        ]
    },
    "regex pattern - UUID": {
        "prefix": [
            "regex-pat-uuid",
            "q-reg-pat-uuid",
            "uuid-regex-pattern",
        ],
        "description": "Create constant for UUID pattern",
        "body": [
            "private static final String ${1:UUID_PATTERN} =",
            "\t\t\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\";",
            "",
            "$0",
        ]
    },
}